// <auto-generated />
using System;
using CandyShop.Areas.Identity.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CandyShop.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230117125652_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CandyShop.Areas.Identity.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreditCardNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerFName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerLName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "a4cf1abe-a475-464a-b647-45158a02e76c",
                            AccessFailedCount = 0,
                            Address = "Adminsgatan 8A",
                            City = "Göteborg",
                            ConcurrencyStamp = "a98e0cc8-81f1-4e4a-bb0f-0e7b597b69be",
                            Country = "Sweden",
                            CreditCardNumber = "00000 00000 00000",
                            CustomerFName = "Admin",
                            CustomerLName = "Adminsson",
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL:COM",
                            NormalizedUserName = "admin@gmail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAECDlnfkqVbdTU80hyGSi43M14GO2Xu9lPjetgfcA1ueWYgxgI60K2kocHn4ftY8mFQ==",
                            PhoneNumber = "0737555555",
                            PhoneNumberConfirmed = false,
                            PostalCode = "411777",
                            SecurityStamp = "dee8fec2-2ff9-4897-9fb0-b161ce7abef3",
                            TwoFactorEnabled = false,
                            UserName = "admin@gmail.com"
                        },
                        new
                        {
                            Id = "1ee606a4-c578-4aa2-82a7-630e9c7e6a30",
                            AccessFailedCount = 0,
                            Address = "Usersgatan 8A",
                            City = "Göteborg",
                            ConcurrencyStamp = "99e0f2d2-0026-4f7b-b8f2-566a6fb83d37",
                            Country = "Sweden",
                            CreditCardNumber = "00000 00000 00000",
                            CustomerFName = "User",
                            CustomerLName = "Usersson",
                            Email = "user@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@GMAIL:COM",
                            NormalizedUserName = "user@gmail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEOIiBy/QKBfZtpiUaWCmCCeh0AreAPE/vVQQQFjeRCvKu1Kb5bGiS1TWOhHtfLCtKA==",
                            PhoneNumber = "0737555555",
                            PhoneNumberConfirmed = false,
                            PostalCode = "411777",
                            SecurityStamp = "7dbeb7e2-e84f-4f15-abc5-9ce4e536877f",
                            TwoFactorEnabled = false,
                            UserName = "user@gmail.com"
                        });
                });

            modelBuilder.Entity("CandyShop.Models.Candy", b =>
                {
                    b.Property<int>("CandyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CandyId"), 1L, 1);

                    b.Property<int>("CandyCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CandyDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CandyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("CandyPrice")
                        .HasColumnType("float");

                    b.Property<int>("CandyQuantity")
                        .HasColumnType("int");

                    b.HasKey("CandyId");

                    b.HasIndex("CandyCategoryId");

                    b.ToTable("Candies");

                    b.HasData(
                        new
                        {
                            CandyId = 1,
                            CandyCategoryId = 1,
                            CandyDescription = "Caramels are made by cooking sugar and water together",
                            CandyName = "Coffee Rio",
                            CandyPrice = 5.0,
                            CandyQuantity = 50
                        },
                        new
                        {
                            CandyId = 2,
                            CandyCategoryId = 1,
                            CandyDescription = "A tasty Caramel and sugary Crunch",
                            CandyName = "Caramel Crunch",
                            CandyPrice = 15.0,
                            CandyQuantity = 50
                        },
                        new
                        {
                            CandyId = 3,
                            CandyCategoryId = 1,
                            CandyDescription = "The Vanila taste with the sweet of caramel",
                            CandyName = "Vanilla Caramel",
                            CandyPrice = 10.0,
                            CandyQuantity = 50
                        },
                        new
                        {
                            CandyId = 4,
                            CandyCategoryId = 1,
                            CandyDescription = "The Vanila taste with the sweet of caramel",
                            CandyName = "Caramel Squares",
                            CandyPrice = 10.0,
                            CandyQuantity = 50
                        },
                        new
                        {
                            CandyId = 5,
                            CandyCategoryId = 1,
                            CandyDescription = "Combination of nuts and the sweet of caramel",
                            CandyName = "Nut Caramel",
                            CandyPrice = 15.0,
                            CandyQuantity = 40
                        },
                        new
                        {
                            CandyId = 6,
                            CandyCategoryId = 2,
                            CandyDescription = "Tastey colorful chocolate",
                            CandyName = "M&Ms",
                            CandyPrice = 15.0,
                            CandyQuantity = 40
                        },
                        new
                        {
                            CandyId = 7,
                            CandyCategoryId = 2,
                            CandyDescription = "A mini full of flavor chocolate",
                            CandyName = "Kit Kat",
                            CandyPrice = 11.0,
                            CandyQuantity = 45
                        },
                        new
                        {
                            CandyId = 8,
                            CandyCategoryId = 2,
                            CandyDescription = "Combination of Almond and the sweet of chocolate",
                            CandyName = "Almond Joy",
                            CandyPrice = 16.0,
                            CandyQuantity = 40
                        },
                        new
                        {
                            CandyId = 9,
                            CandyCategoryId = 2,
                            CandyDescription = "Combination of Cherries flavor and the sweet of chocolate",
                            CandyName = "Chocolate Cherries",
                            CandyPrice = 15.0,
                            CandyQuantity = 50
                        },
                        new
                        {
                            CandyId = 10,
                            CandyCategoryId = 2,
                            CandyDescription = "Biscute Coverd of chocolate",
                            CandyName = "Krackle",
                            CandyPrice = 11.0,
                            CandyQuantity = 50
                        },
                        new
                        {
                            CandyId = 11,
                            CandyCategoryId = 2,
                            CandyDescription = "Combination of nuts and the sweet of chocolate",
                            CandyName = "Snickers",
                            CandyPrice = 15.0,
                            CandyQuantity = 40
                        },
                        new
                        {
                            CandyId = 12,
                            CandyCategoryId = 3,
                            CandyDescription = "Gummies are gelatin based chewy candies",
                            CandyName = "Gummi Cheries",
                            CandyPrice = 18.0,
                            CandyQuantity = 55
                        },
                        new
                        {
                            CandyId = 13,
                            CandyCategoryId = 3,
                            CandyDescription = "Chewy candies With different flavors",
                            CandyName = "Gummi worms",
                            CandyPrice = 5.0,
                            CandyQuantity = 60
                        },
                        new
                        {
                            CandyId = 14,
                            CandyCategoryId = 3,
                            CandyDescription = "Chewy candies With cola flavor",
                            CandyName = "Gummi cola bottles",
                            CandyPrice = 5.0,
                            CandyQuantity = 60
                        },
                        new
                        {
                            CandyId = 15,
                            CandyCategoryId = 3,
                            CandyDescription = "Chewy candies With stawberry flavor",
                            CandyName = "Gummi strawberry",
                            CandyPrice = 5.0,
                            CandyQuantity = 60
                        },
                        new
                        {
                            CandyId = 16,
                            CandyCategoryId = 3,
                            CandyDescription = "Chewy candies With banana flavor",
                            CandyName = "Gummi banana",
                            CandyPrice = 5.0,
                            CandyQuantity = 60
                        },
                        new
                        {
                            CandyId = 17,
                            CandyCategoryId = 4,
                            CandyDescription = "Licorice is a semi-soft candy",
                            CandyName = "Red Vines",
                            CandyPrice = 20.0,
                            CandyQuantity = 50
                        },
                        new
                        {
                            CandyId = 18,
                            CandyCategoryId = 4,
                            CandyDescription = "Licorice is a semi-soft candy with cherry flavor",
                            CandyName = "Twizzler",
                            CandyPrice = 20.0,
                            CandyQuantity = 50
                        },
                        new
                        {
                            CandyId = 19,
                            CandyCategoryId = 4,
                            CandyDescription = "A hard sweet candy",
                            CandyName = "Chupa Chups",
                            CandyPrice = 15.0,
                            CandyQuantity = 40
                        },
                        new
                        {
                            CandyId = 20,
                            CandyCategoryId = 4,
                            CandyDescription = "A sour candy",
                            CandyName = "Sour Punch",
                            CandyPrice = 13.0,
                            CandyQuantity = 30
                        },
                        new
                        {
                            CandyId = 21,
                            CandyCategoryId = 4,
                            CandyDescription = "A sour candy",
                            CandyName = "Warheads",
                            CandyPrice = 15.0,
                            CandyQuantity = 40
                        },
                        new
                        {
                            CandyId = 22,
                            CandyCategoryId = 4,
                            CandyDescription = "Chewy sweet candy",
                            CandyName = "Abba-Zaba",
                            CandyPrice = 10.0,
                            CandyQuantity = 70
                        },
                        new
                        {
                            CandyId = 23,
                            CandyCategoryId = 4,
                            CandyDescription = "Chewy sweet candy",
                            CandyName = "Sky Bar",
                            CandyPrice = 5.0,
                            CandyQuantity = 60
                        },
                        new
                        {
                            CandyId = 24,
                            CandyCategoryId = 4,
                            CandyDescription = "Chewy with peach flavor candy",
                            CandyName = "Peach Blossoms",
                            CandyPrice = 10.0,
                            CandyQuantity = 50
                        });
                });

            modelBuilder.Entity("CandyShop.Models.Cart", b =>
                {
                    b.Property<int>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartId"), 1L, 1);

                    b.Property<string>("CustomerCartId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TotalPrice")
                        .HasColumnType("int");

                    b.HasKey("CartId");

                    b.HasIndex("CustomerCartId")
                        .IsUnique();

                    b.ToTable("Carts");

                    b.HasData(
                        new
                        {
                            CartId = 1,
                            CustomerCartId = "a4cf1abe-a475-464a-b647-45158a02e76c",
                            TotalPrice = 100
                        },
                        new
                        {
                            CartId = 2,
                            CustomerCartId = "1ee606a4-c578-4aa2-82a7-630e9c7e6a30",
                            TotalPrice = 150
                        });
                });

            modelBuilder.Entity("CandyShop.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"), 1L, 1);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryName = "Caramels"
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryName = "Chocolate"
                        },
                        new
                        {
                            CategoryId = 3,
                            CategoryName = "Gummies"
                        },
                        new
                        {
                            CategoryId = 4,
                            CategoryName = "Combination"
                        });
                });

            modelBuilder.Entity("CandyShop.Models.ItemOrder", b =>
                {
                    b.Property<int>("ItemOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItemOrderId"), 1L, 1);

                    b.Property<int>("CandyId")
                        .HasColumnType("int");

                    b.Property<string>("CandyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CartId")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ItemOrderId");

                    b.HasIndex("CartId");

                    b.ToTable("ItemOrders");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "982985fa-b91b-4f50-8544-f7498759ba85",
                            ConcurrencyStamp = "1181d804-eb8e-4b2e-9d95-3a42eb83154f",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "0022141b-6474-4593-aeae-8e8268d3d339",
                            ConcurrencyStamp = "13afd213-f06e-4982-a1a1-ee6388cd93f8",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "a4cf1abe-a475-464a-b647-45158a02e76c",
                            RoleId = "982985fa-b91b-4f50-8544-f7498759ba85"
                        },
                        new
                        {
                            UserId = "1ee606a4-c578-4aa2-82a7-630e9c7e6a30",
                            RoleId = "0022141b-6474-4593-aeae-8e8268d3d339"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CandyShop.Models.Candy", b =>
                {
                    b.HasOne("CandyShop.Models.Category", "Category")
                        .WithMany("Candies")
                        .HasForeignKey("CandyCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("CandyShop.Models.Cart", b =>
                {
                    b.HasOne("CandyShop.Areas.Identity.Data.ApplicationUser", "Customer")
                        .WithOne("Cart")
                        .HasForeignKey("CandyShop.Models.Cart", "CustomerCartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("CandyShop.Models.ItemOrder", b =>
                {
                    b.HasOne("CandyShop.Models.Cart", null)
                        .WithMany("ItemOrders")
                        .HasForeignKey("CartId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CandyShop.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CandyShop.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CandyShop.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CandyShop.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CandyShop.Areas.Identity.Data.ApplicationUser", b =>
                {
                    b.Navigation("Cart")
                        .IsRequired();
                });

            modelBuilder.Entity("CandyShop.Models.Cart", b =>
                {
                    b.Navigation("ItemOrders");
                });

            modelBuilder.Entity("CandyShop.Models.Category", b =>
                {
                    b.Navigation("Candies");
                });
#pragma warning restore 612, 618
        }
    }
}
